-- skapas alla tabeller med främmande nycklar och används av de olika varianter av referens-integritet
drop database if exists shoes_WebbShop;
create database shoes_WebbShop;
use shoes_WebbShop;

create table Brand(

id int not null auto_increment primary key,
name varchar(50) not null UNIQUE,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);


create table Category(

id int not null auto_increment primary key,
name varchar(50) not null,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);

create table Customer(

id int not null auto_increment primary key,
name varchar(50) not null, 
phone varchar(10),
address varchar(255) not null,
country varchar(50) not null,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP
 
 );

create table Shoes(

id int not null auto_increment primary key,
size int not null, 
shoes_number int not null UNIQUE,
FK_brand_id int not null,
color varchar(15) not null, 
price decimal(11,2) not null,
-- När nyckeln till en post i Brand-tabellen uppdateras vill vi också
-- uppdatera FK_brand_id-värdet i Shoes-tabellen.
-- om en brand uppdaterats då kommer att uppdatera också i shoes tabellen.
foreign key (FK_brand_id) references Brand(id) on update cascade,  
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP


);

create table Shoes_category(

FK_category_id int not null, 
FK_shoes_id int not null,
primary key(FK_category_id, FK_shoes_id),-- undvika att man gör dubbel lagring

-- När en post i Shoes-tabellen tas bort vill vi att alla Shoes-poster från
-- det märket också ska tas bort ur Shoes_category-tabellen
-- men om en category updaterats då blir också updaterats posten här.
foreign key(FK_category_id) references Category(id) on update cascade,
foreign key(FK_shoes_id) references Shoes(id)on delete cascade,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);

create table Orders(

id int not null auto_increment primary key,
FK_customer_id int not null, 
created timestamp DEFAULT current_timestamp,
orders_comment varchar(255) DEFAULT 'NI ÄR FANTASTIKA', 
order_date date not null,
foreign key (FK_customer_id) references Customer(id) on update cascade, -- om vi vill ändra address för customer!!
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);

create table Order_line_item(

FK_shoes_id int not null,
FK_order_id int not null, 
primary key(FK_shoes_id, FK_order_id),
quantity int not null,
foreign key (FK_shoes_id) references Shoes(id)on delete cascade,
foreign key (FK_order_id) references Orders(id)on delete cascade,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);

create table Grade (

id int not null auto_increment primary key,
name varchar(255) not null,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP

);

create table Surveys  (

id int not null auto_increment,
comment varchar(255) DEFAULT 'JAG ÄLSKAR MINA SKOR',
FK_grade_id int not null, 
issue_date timestamp  on update CURRENT_TIMESTAMP ,
FK_order_id int not null UNIQUE,
primary key(id),
foreign key (FK_grade_id) references grade(id) on update cascade,
foreign key(FK_order_id) references Orders(id) on delete cascade,
created timestamp DEFAULT CURRENT_TIMESTAMP,
updated timestamp ON UPDATE CURRENT_TIMESTAMP
);

insert into Brand(name) 
values
('Nike'),('Adidas'),('Ecco'),('Reebok'),('Vans'),
('Puma'),('Skechers'),('Fila');

insert into Category(name) 
values
('Sport'),('Kids'),('Trainers'),('Boots'),('Walking');


insert into Customer(name,phone,address,country) values
("Ashkan",0739975150,"Stockholm ","Sweden"),
("Sigrun",0739975151,"Tehran","Iran"),
("Peter",0739975152,"Berlin","Germany "),
("Hodei",0739975153,"Kista","Sweden"),
("Oscar",0739975154,"Washintgton","USA"),
("Salem",0739975155,"London","England"),
("Sara",0739975156,"New Delhi","India"),
("Lili",0739975157,"Sollentuna","Sweden");

insert into Shoes(size,FK_brand_id,shoes_number,color,price) 
values
(40,1,112,'red',2200),(41,2,115,'blue',2400),(43,2,259,'yellow',2500),(38,4,358,'red',3200),(45,6,751,'black',1700),
(42,7,678,'black',1000),(40,1,123,'orang',200),(39,3,321,'white',5000),(43,8,233,'yellow',3000),(38,5,145,'black',2500);

insert into Shoes_category(FK_category_id, FK_shoes_id)
values
(1, 1),(3, 1),(2, 1),(3, 2),(5, 8),(2, 2),(4, 1),(3, 8);

insert into Orders(FK_customer_id, order_date)
values
(1,'2020-01-15'),(2, '2020-01-17'),(3, '2020-01-18'),
(7, '2021-01-03'),(8, '2020-01-29'),(4, '2020-01-06'),
(1, '2020-03-17'),(5, '2020-01-03'),(1, '2020-05-06'),
(1, '2020-01-05'),(6, '2020-05-03'),(1, '2021-01-25'),
(1, '2020-03-09'),(5, '2020-01-25'),(5, '2020-01-14'),
(2, '2020-08-25'),(2, '2020-01-03');

insert into Order_line_item(FK_shoes_id, FK_order_id, quantity)
values
(2,1,2),(9,1,1),(10,1,1),(7,2,2),(2,2,2),(8,2,2),(9,2,2),(7,3,2),
(4,3,2),(7,4,3),(3,5,2),(2,6,3),(5,6,1),(8,7,2),(6,8,2),(4,9,2),
(2,10,4),(2,11,4),(5,12,1),(3,13,2),(2,14,1),(10,15,4),(9,16,1),(7,17,2);


insert into Grade(name)
values
('Missnöjd'), ('Ganska nöjd') , ('Nöjd'), ('mycket nöjd');

insert into Surveys (FK_grade_id, FK_order_id)
values
(1, 2),(2, 4),(2, 8),(2, 10),(2, 7),(4, 3);

-- create index IX_brandName on brand(name);   Det är inte rimlig för att vi har inte så många brander i varkligheten.
create index IX_customerName on customer(name);


-- Sigruns krav
-- ER-modellen ska vara på 3NF. Om du medvetet väljer att frångå 3NF för någon eller några
-- tabeller ska detta motiveras med en bra anledning varför, i en kommentar.
-- vår anledning
-- Gäller om 3NF måste vi dela upp customer och country till 2 separata tabell (country -> address)  
-- DOCK behöver vi  inte göra det för att det är onödigt(med tänk på databas krav) för vår databas dessutom vi betjänt inte oss att ha två separata tabell.

ALTER TABLE shoes 
ADD COLUMN quantity INT NOT NULL DEFAULT 0 AFTER updated;


UPDATE shoes SET quantity = '120' WHERE id = '1';
UPDATE shoes SET quantity = '150' WHERE id = '2';
UPDATE shoes SET quantity = '180' WHERE id = '3';
UPDATE shoes SET quantity = '20' WHERE id = '4';
UPDATE shoes SET quantity = '45' WHERE id = '5';
UPDATE shoes SET quantity = '150' WHERE id = '6';
UPDATE shoes SET quantity = '100' WHERE id = '7';
UPDATE shoes SET quantity = '140' WHERE id = '8';
UPDATE shoes SET quantity = '120' WHERE id = '9';
UPDATE shoes SET quantity = '140' WHERE id = '10';
